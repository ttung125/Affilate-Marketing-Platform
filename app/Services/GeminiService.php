<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use App\Services\SystemInfoService;

class GeminiService
{
    protected string $baseUrl = "https://generativelanguage.googleapis.com/v1beta/models";
    protected string $model = "gemini-2.5-flash";
    protected string $apiKey;

    public function __construct()
    {
        $this->apiKey = env('GEMINI_API_KEY');
    }

    public function ask(string $message, string $userRole = 'guest', string $userName = 'Kh√°ch', $userId = null)
    {
        // Debug: Log API key
        Log::info('GeminiService Debug:', [
            'api_key_exists' => !empty($this->apiKey),
            'api_key_length' => strlen($this->apiKey ?? ''),
            'api_key_start' => substr($this->apiKey ?? '', 0, 10),
            'message' => $message,
            'user_role' => $userRole,
            'user_name' => $userName,
            'user_id' => $userId
        ]);

        // Ki·ªÉm tra API key
        if (!$this->apiKey || $this->apiKey === 'your_gemini_api_key_here') {
            Log::info('Using fallback: API key not configured');
            return $this->getFallbackResponse($message);
        }

        $url = "{$this->baseUrl}/{$this->model}:generateContent";

        // T·∫°o system context v·ªõi user info v√† system stats
        $systemContext = $this->getSystemContext($userRole, $userName, $userId);
        $fullMessage = $systemContext . "\n\nUser: " . $message;

        $requestData = [
            "contents" => [
                [
                    "parts" => [
                        ["text" => $fullMessage]
                    ]
                ]
            ],
            "generationConfig" => [
                "temperature" => 0.7,
                "topK" => 40,
                "topP" => 0.95,
                "maxOutputTokens" => 1024,
            ]
        ];

        Log::info('Gemini API Request:', [
            'url' => $url,
            'headers' => [
                'x-goog-api-key' => substr($this->apiKey, 0, 10) . '...',
                'Content-Type' => 'application/json'
            ],
            'data' => $requestData
        ]);

        $response = Http::withHeaders([
            'x-goog-api-key' => $this->apiKey,
            'Content-Type' => 'application/json'
        ])->post($url, $requestData);

        Log::info('Gemini API Response:', [
            'status' => $response->status(),
            'successful' => $response->successful(),
            'body' => $response->body()
        ]);

        if ($response->successful()) {
            $json = $response->json();
            $text = $json['candidates'][0]['content']['parts'][0]['text'] ?? null;

            if ($text) {
                Log::info('Gemini API Success:', ['response' => $text]);
                return $text;
            } else {
                Log::warning('Gemini API: No text in response', ['json' => $json]);
                return $this->getFallbackResponse($message);
            }
        }

        // N·∫øu API l·ªói, s·ª≠ d·ª•ng fallback response
        Log::error('Gemini API Error:', [
            'status' => $response->status(),
            'body' => $response->body()
        ]);
        return $this->getFallbackResponse($message);
    }

    /**
     * T·∫°o system context ƒë·ªÉ AI hi·ªÉu h·ªá th·ªëng
     */
    private function getSystemContext(string $userRole = 'guest', string $userName = 'Kh√°ch', $userId = null)
    {
        $roleSpecificInfo = $this->getRoleSpecificInfo($userRole);
        $systemStats = $this->getSystemStats();
        $userContext = $userId ? $this->getUserContext($userId) : null;

        $userInfo = "üë§ **TH√îNG TIN USER:**
- T√™n: {$userName}
- Vai tr√≤: {$userRole}
- Th·ªùi gian: " . now()->format('d/m/Y H:i');

        if ($userContext) {
            $userInfo .= "
- User ID: {$userContext['user_id']}
- Tham gia: {$userContext['created_at']}
- L·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi: {$userContext['last_login']}
- S·ªë affiliate links: {$userContext['affiliate_links_count']}
- T·ªïng thu nh·∫≠p: {$userContext['total_earnings']} VNƒê";
        }

        return "B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa h·ªá th·ªëng Affiliate Marketing Platform. 

{$userInfo}

üìä **TH·ªêNG K√ä H·ªÜ TH·ªêNG:**
- T·ªïng users: {$systemStats['total_users']}
- T·ªïng s·∫£n ph·∫©m: {$systemStats['total_products']}
- T·ªïng affiliate links: {$systemStats['total_affiliate_links']}
- Campaigns ƒëang ho·∫°t ƒë·ªông: {$systemStats['active_campaigns']}
- Conversions g·∫ßn ƒë√¢y: {$systemStats['recent_conversions']}
- Tr·∫°ng th√°i h·ªá th·ªëng: {$systemStats['system_status']}

üè¢ **V·ªÄ H·ªÜ TH·ªêNG:**
- N·ªÅn t·∫£ng affiliate marketing to√†n di·ªán
- H·ªó tr·ª£ 3 lo·∫°i ng∆∞·ªùi d√πng: Admin, Publisher, Shop
- Qu·∫£n l√Ω affiliate links, tracking, v√† hoa h·ªìng

üë• **C√ÅC VAI TR√í:**
- **Admin**: Qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng, xem b√°o c√°o, qu·∫£n l√Ω users
- **Publisher**: T·∫°o affiliate links, ki·∫øm hoa h·ªìng t·ª´ vi·ªác gi·ªõi thi·ªáu s·∫£n ph·∫©m
- **Shop**: ƒêƒÉng s·∫£n ph·∫©m, t·∫°o affiliate campaigns, qu·∫£n l√Ω ƒë∆°n h√†ng

üîó **T√çNH NƒÇNG CH√çNH:**
- **Affiliate Links**: T·∫°o v√† qu·∫£n l√Ω links affiliate
- **Tracking**: Theo d√µi clicks, conversions, hoa h·ªìng
- **Wallet**: Qu·∫£n l√Ω thu nh·∫≠p v√† thanh to√°n
- **Reports**: B√°o c√°o chi ti·∫øt v·ªÅ performance
- **Products**: Qu·∫£n l√Ω s·∫£n ph·∫©m v√† campaigns

üí∞ **V·ªÄ HOA H·ªíNG:**
- Hoa h·ªìng ƒë∆∞·ª£c t√≠nh theo % ho·∫∑c s·ªë ti·ªÅn c·ªë ƒë·ªãnh
- Thanh to√°n t·ª± ƒë·ªông khi ƒë·∫°t ng∆∞·ª°ng
- Theo d√µi real-time thu nh·∫≠p

üìä **B√ÅO C√ÅO:**
- Dashboard v·ªõi th·ªëng k√™ t·ªïng quan
- B√°o c√°o chi ti·∫øt theo th·ªùi gian
- Export d·ªØ li·ªáu

{$roleSpecificInfo}

H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi c·ªßa user d·ª±a tr√™n th√¥ng tin n√†y. Lu√¥n h∆∞·ªõng d·∫´n c·ª• th·ªÉ v√† th·ª±c t·∫ø theo vai tr√≤ c·ªßa h·ªç.";
    }

    private function getSystemStats()
    {
        try {
            $systemInfoService = new SystemInfoService();
            return $systemInfoService->getSystemStats();
        } catch (\Exception $e) {
            return [
                'total_users' => 0,
                'total_products' => 0,
                'total_affiliate_links' => 0,
                'active_campaigns' => 0,
                'recent_conversions' => 0,
                'system_status' => 'maintenance'
            ];
        }
    }

    private function getUserContext($userId)
    {
        try {
            $systemInfoService = new SystemInfoService();
            return $systemInfoService->getUserContext($userId);
        } catch (\Exception $e) {
            return null;
        }
    }

    /**
     * Th√¥ng tin c·ª• th·ªÉ theo vai tr√≤
     */
    private function getRoleSpecificInfo(string $userRole)
    {
        switch ($userRole) {
            case 'admin':
                return "üéØ **QUY·ªÄN H·∫†N ADMIN:**
- Xem t·∫•t c·∫£ b√°o c√°o v√† th·ªëng k√™
- Qu·∫£n l√Ω users v√† permissions
- C·∫•u h√¨nh h·ªá th·ªëng
- Xem dashboard t·ªïng quan
- Qu·∫£n l√Ω affiliate campaigns
- X·ª≠ l√Ω thanh to√°n hoa h·ªìng";

            case 'publisher':
                return "üéØ **QUY·ªÄN H·∫†N PUBLISHER:**
- T·∫°o v√† qu·∫£n l√Ω affiliate links
- Xem b√°o c√°o thu nh·∫≠p c√° nh√¢n
- Theo d√µi clicks v√† conversions
- R√∫t ti·ªÅn t·ª´ wallet
- Xem danh s√°ch s·∫£n ph·∫©m c√≥ s·∫µn
- T·ªëi ∆∞u h√≥a affiliate links";

            case 'shop':
                return "üéØ **QUY·ªÄN H·∫†N SHOP:**
- ƒêƒÉng s·∫£n ph·∫©m v√† t·∫°o campaigns
- Qu·∫£n l√Ω affiliate links c·ªßa s·∫£n ph·∫©m
- Xem b√°o c√°o b√°n h√†ng
- Qu·∫£n l√Ω ƒë∆°n h√†ng v√† conversions
- C·∫•u h√¨nh hoa h·ªìng cho publishers
- Theo d√µi performance campaigns";

            default:
                return "üéØ **QUY·ªÄN H·∫†N GUEST:**
- Xem th√¥ng tin c∆° b·∫£n v·ªÅ h·ªá th·ªëng
- T√¨m hi·ªÉu v·ªÅ affiliate marketing
- ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
- Li√™n h·ªá h·ªó tr·ª£";
        }
    }

    private function getFallbackResponse(string $message)
    {
        $message = strtolower($message);

        // Responses th√¥ng minh h∆°n cho fallback
        if (strpos($message, 'xin ch√†o') !== false || strpos($message, 'hello') !== false) {
            return "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa h·ªá th·ªëng affiliate marketing. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng, h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng, ho·∫∑c h·ªó tr·ª£ k·ªπ thu·∫≠t.";
        }

        if (strpos($message, 'b·∫°n l√† ai') !== false || strpos($message, 'who are you') !== false) {
            return "T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa h·ªá th·ªëng affiliate marketing. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c c√¢u h·ªèi v·ªÅ h·ªá th·ªëng, h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng, ho·∫∑c h·ªó tr·ª£ k·ªπ thu·∫≠t.";
        }

        if (strpos($message, 'gi√∫p') !== false || strpos($message, 'help') !== false) {
            return "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng\n‚Ä¢ Th√¥ng tin v·ªÅ affiliate marketing\n‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t\n‚Ä¢ C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p\n\nB·∫°n mu·ªën bi·∫øt th√™m v·ªÅ ƒëi·ªÅu g√¨?";
        }

        if (strpos($message, 'affiliate') !== false) {
            return "Affiliate marketing l√† h√¨nh th·ª©c marketing trong ƒë√≥ b·∫°n ki·∫øm hoa h·ªìng b·∫±ng c√°ch qu·∫£ng b√° s·∫£n ph·∫©m c·ªßa ng∆∞·ªùi kh√°c. Trong h·ªá th·ªëng n√†y, b·∫°n c√≥ th·ªÉ t·∫°o affiliate links v√† ki·∫øm thu nh·∫≠p t·ª´ vi·ªác gi·ªõi thi·ªáu s·∫£n ph·∫©m.";
        }

        if (strpos($message, 'link') !== false) {
            return "Affiliate links l√† c√°c li√™n k·∫øt ƒë·∫∑c bi·ªát gi√∫p theo d√µi vi·ªác chuy·ªÉn ƒë·ªïi. B·∫°n c√≥ th·ªÉ t·∫°o link affiliate trong ph·∫ßn 'Affiliate Links' v√† chia s·∫ª ch√∫ng ƒë·ªÉ ki·∫øm hoa h·ªìng.";
        }

        if (strpos($message, 'thu nh·∫≠p') !== false || strpos($message, 'earning') !== false) {
            return "Thu nh·∫≠p c·ªßa b·∫°n ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n hoa h·ªìng t·ª´ c√°c chuy·ªÉn ƒë·ªïi th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt trong ph·∫ßn 'Wallet' ho·∫∑c 'Reports'.";
        }

        // Default response
        return "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c c√¢u h·ªèi v·ªÅ h·ªá th·ªëng affiliate marketing. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ c√°ch s·ª≠ d·ª•ng, t·∫°o link affiliate, ho·∫∑c b·∫•t k·ª≥ th√¥ng tin n√†o kh√°c.";
    }

}

